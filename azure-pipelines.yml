variables:
  project_name: 'EnvironmentApi'
  netcore_version: '2.2'
  relative_path_publish: 'bin/Release/netcoreapp'
  relative_path_copy: '/bin/Release/netcoreapp'
  sonarcloud_project: 'RenasTI_Environment_API'
  sonarcloud_organization: 'renasti-github'
  sonarcloud_account: 'testeSonar'
  docker_image_name: 'renasti/environment-api'
  docker_registry_account: 'DockerRegistryRenasTI'

name: 1.0$(rev:.r)

jobs:
- job: Build
  steps:
  - script: |
      pwd && ls -la
      dotnet restore
      dotnet publish -c Release -o $(relative_path_publish)$(netcore_version)
      mkdir artifact
      cp -r $(project_name)/$(relative_path_copy)$(netcore_version) artifact/$(Build.SourceBranchName)
    displayName: Build Application
  - task: PublishPipelineArtifact@1
    displayName: Store Application Artifact
    inputs:
      path: $(System.DefaultWorkingDirectory)/artifact
      artifact: $(project_name)

- job: UnitTests
  dependsOn: Build 
  steps:
    - script: |
        dotnet tool install --global coverlet.console 
        dotnet add $(project_name).Tests/$(project_name).Tests.csproj package coverlet.msbuild
        dotnet add $(project_name).Tests/$(project_name).Tests.csproj package XunitXml.TestLogger
        dotnet test /p:CollectCoverage=true \
                  /p:CoverletOutputFormat=\"opencover,cobertura\" \
                  /p:CoverletOutput=results/result \
                  /p:Exclude=[xunit.*]* $(project_name).sln \
                  --test-adapter-path:. --logger:"xunit;LogFilePath=results/result.xunit.xml"
      displayName: Running Unit Tests
    - task: PublishPipelineArtifact@1
      displayName: Store Test Result
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_name).Tests/results
        artifact: UnitTestResults
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage 
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(System.DefaultWorkingDirectory)/$(project_name).Tests/results/result.cobertura.xml
        pathToSources: .
        failIfCoverageEmpty: true
    - task: PublishTestResults@2
      displayName: Publish Test Result
      inputs:
        testResultsFormat: 'XUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/$(project_name).Tests/results/result.xunit.xml'
        testRunTitle: 'Collecting Test Results'

- job: SonarAnalysis
  dependsOn: UnitTests
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Get Test Result
    inputs:
      artifact: UnitTestResults
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'testeSonar'
      scannerMode: 'MSBuild'
      projectKey: '$(sonarcloud_project)'
      projectName: '$(project_name)'
      extraProperties: 'sonar.cs.opencover.reportsPaths=$(Pipeline.Workspace)/result.opencover.xml'
  - script: |
      dotnet build
    displayName: Runnig Build For Analysis
  - task: SonarQubeAnalyze@4
    displayName: Finish Sonarqube Analysis
  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: '300'

- job: PublishDockerImage
  dependsOn: SonarAnalysis
  condition:  and(succeeded(), variables['Build.SourceBranch'], 'refs/heads/master')
  variables:
    Version: '$(Build.BuildNumber)'
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Get Application Artifact
    inputs:
      artifact: $(project_name)
  - script: |
      mkdir -p $(project_name)/bin/Release
      cp -r $(Pipeline.Workspace)/$(Build.SourceBranchName) $(project_name)/bin/Release/netcoreapp$(netcore_version)
    displayName: Prepare Files
  - task: Docker@2
    displayName: 'Build and Publish Docker Image'
    inputs:
      containerRegistry: '$(docker_registry_account)'
      repository: '$(docker_image_name)'
      command: 'buildAndPush'
      Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile'
      buildContext: '$(System.DefaultWorkingDirectory)'
      tags: |
        $(Version)
        latest
